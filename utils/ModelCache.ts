'use client';

import * as THREE from 'three';
import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';
import { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader.js';

interface CachedModel {
  object: THREE.Object3D;
  materials?: any;
  timestamp: number;
}

interface CachedMaterial {
  materials: any;
  timestamp: number;
}

class ModelCacheManager {
  private modelCache = new Map<string, CachedModel>();
  private materialCache = new Map<string, CachedMaterial>();
  private loadingPromises = new Map<string, Promise<THREE.Object3D>>();
  private materialPromises = new Map<string, Promise<any>>();
  private readonly maxCacheSize = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≤ –∫–µ—à–µ
  private readonly maxAge = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  private readonly maxConcurrentLoads = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
  private currentLoads = 0;

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫–µ—à–∞
  private getModelKey(modelPath: string, mtlPath?: string): string {
    return `${modelPath}${mtlPath ? `|${mtlPath}` : ''}`;
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞
  private cleanupCache() {
    const now = Date.now();
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –º–æ–¥–µ–ª–µ–π
    Array.from(this.modelCache.entries()).forEach(([key, cached]) => {
      if (now - cached.timestamp > this.maxAge) {
        this.disposeModel(cached.object);
        this.modelCache.delete(key);
      }
    });
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    Array.from(this.materialCache.entries()).forEach(([key, cached]) => {
      if (now - cached.timestamp > this.maxAge) {
        this.materialCache.delete(key);
      }
    });
    
    // –ï—Å–ª–∏ –∫–µ—à –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    if (this.modelCache.size > this.maxCacheSize) {
      const sortedEntries = Array.from(this.modelCache.entries())
        .sort((a, b) => a[1].timestamp - b[1].timestamp);
      
      const toRemove = sortedEntries.slice(0, this.modelCache.size - this.maxCacheSize);
      for (const [key, cached] of toRemove) {
        this.disposeModel(cached.object);
        this.modelCache.delete(key);
      }
    }
  }

  // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–æ–¥–µ–ª–∏
  private disposeModel(object: THREE.Object3D) {
    object.traverse((child) => {
      if (child instanceof THREE.Mesh) {
        if (child.geometry) {
          child.geometry.dispose();
        }
        if (child.material) {
          if (Array.isArray(child.material)) {
            child.material.forEach(material => {
              if (material.map) material.map.dispose();
              if (material.normalMap) material.normalMap.dispose();
              if (material.aoMap) material.aoMap.dispose();
              material.dispose();
            });
          } else {
            if (child.material.map) child.material.map.dispose();
            if (child.material.normalMap) child.material.normalMap.dispose();
            if (child.material.aoMap) child.material.aoMap.dispose();
            child.material.dispose();
          }
        }
      }
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  async loadMaterials(mtlPath: string): Promise<any> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = this.materialCache.get(mtlPath);
    if (cached) {
      return cached.materials;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ
    const existingPromise = this.materialPromises.get(mtlPath);
    if (existingPromise) {
      return existingPromise;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏
    const loadPromise = new Promise<any>((resolve, reject) => {
      const mtlLoader = new MTLLoader();
      const basePath = mtlPath.substring(0, mtlPath.lastIndexOf('/') + 1);
      const mtlFileName = mtlPath.substring(mtlPath.lastIndexOf('/') + 1);
      mtlLoader.setPath(basePath);
      
      mtlLoader.load(
        mtlFileName,
        (materials) => {
          materials.preload();
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
          this.materialCache.set(mtlPath, {
            materials,
            timestamp: Date.now()
          });
          
          this.materialPromises.delete(mtlPath);
          resolve(materials);
        },
        undefined,
        (error) => {
          this.materialPromises.delete(mtlPath);
          reject(error);
        }
      );
    });

    this.materialPromises.set(mtlPath, loadPromise);
    return loadPromise;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  async loadModel(modelPath: string, mtlPath?: string): Promise<THREE.Object3D> {
    const cacheKey = this.getModelKey(modelPath, mtlPath);
    console.log(`üîç ModelCache: loadModel called for ${modelPath}, cacheKey: ${cacheKey}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = this.modelCache.get(cacheKey);
    console.log(`üíæ ModelCache: Cache check result for ${cacheKey}:`, cached ? 'FOUND' : 'NOT FOUND');
    if (cached) {
      console.log(`‚úÖ Model loaded from cache: ${modelPath}`);
      // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      return cached.object.clone();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ
    const existingPromise = this.loadingPromises.get(cacheKey);
    if (existingPromise) {
      console.log(`‚è≥ Waiting for existing load: ${modelPath}`);
      const object = await existingPromise;
      return object.clone();
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏
    const loadPromise = new Promise<THREE.Object3D>(async (resolve, reject) => {
      try {
        const objLoader = new OBJLoader();
        let materials: any;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
        if (mtlPath) {
          try {
            materials = await this.loadMaterials(mtlPath);
            objLoader.setMaterials(materials);
          } catch (error) {
            console.warn('Failed to load materials, loading model without them:', error);
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
        try {
          const response = await fetch(modelPath, { method: 'HEAD' });
          if (!response.ok) {
            throw new Error(`Model file not found: ${modelPath} (${response.status})`);
          }
        } catch (fetchError) {
          console.error(`‚ùå Model file check failed for ${modelPath}:`, fetchError);
          throw new Error(`Model file not accessible: ${modelPath}`);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        console.log(`üîÑ Loading model: ${modelPath}`);
        objLoader.load(
          modelPath,
          (object) => {
            console.log(`‚úÖ Model loaded successfully: ${modelPath}`);
            // –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –ø—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
            if (!materials) {
              object.traverse((child) => {
                if (child instanceof THREE.Mesh) {
                  child.material = new THREE.MeshLambertMaterial({ color: 0x888888 });
                }
              });
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            this.modelCache.set(cacheKey, {
              object: object.clone(), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–æ–Ω –¥–ª—è –∫–µ—à–∞
              materials,
              timestamp: Date.now()
            });

            this.loadingPromises.delete(cacheKey);
            this.cleanupCache(); // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            resolve(object);
          },
          (progress) => {
            if (progress.lengthComputable) {
              const percentComplete = (progress.loaded / progress.total) * 100;
              console.log(`üìä Loading progress for ${modelPath}: ${percentComplete.toFixed(1)}%`);
            }
          },
          (error) => {
            console.error(`‚ùå Failed to load model ${modelPath}:`, error);
            this.loadingPromises.delete(cacheKey);
            reject(error);
          }
        );
      } catch (error) {
        this.loadingPromises.delete(cacheKey);
        reject(error);
      }
    });

    this.loadingPromises.set(cacheKey, loadPromise);
    return loadPromise;
  }

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
  async preloadModels(models: Array<{ modelPath: string; mtlPath?: string }>) {
    console.log(`üöÄ Starting preload of ${models.length} models`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
    const batchSize = this.maxConcurrentLoads;
    const results = [];
    
    for (let i = 0; i < models.length; i += batchSize) {
      const batch = models.slice(i, i + batchSize);
      console.log(`üì¶ Processing batch ${Math.floor(i/batchSize) + 1}/${Math.ceil(models.length/batchSize)} (${batch.length} models)`);
      
      const batchPromises = batch.map(({ modelPath, mtlPath }) => 
        this.loadModel(modelPath, mtlPath).catch(error => {
          console.warn(`‚ö†Ô∏è Failed to preload model ${modelPath}:`, error);
          return null;
        })
      );
      
      const batchResults = await Promise.allSettled(batchPromises);
      results.push(...batchResults);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–∞
      const batchSuccessful = batchResults.filter(r => r.status === 'fulfilled').length;
      const batchFailed = batchResults.filter(r => r.status === 'rejected').length;
      console.log(`‚úÖ Batch completed: ${batchSuccessful} successful, ${batchFailed} failed`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
      if (i + batchSize < models.length) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
    
    const totalSuccessful = results.filter(r => r.status === 'fulfilled').length;
    const totalFailed = results.filter(r => r.status === 'rejected').length;
    console.log(`üèÅ Preload completed: ${totalSuccessful}/${models.length} models loaded successfully`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–µ—à–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
    const cacheInfo = this.getCacheInfo();
    console.log(`üìä Cache state after preload:`, cacheInfo);
    
    return results;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ—à–µ
  getCacheInfo() {
    return {
      modelCacheSize: this.modelCache.size,
      materialCacheSize: this.materialCache.size,
      loadingPromises: this.loadingPromises.size,
      materialPromises: this.materialPromises.size
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫–µ—à–∞
  clearCache() {
    // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –º–æ–¥–µ–ª–µ–π
    Array.from(this.modelCache.values()).forEach(cached => {
      this.disposeModel(cached.object);
    });
    
    this.modelCache.clear();
    this.materialCache.clear();
    this.loadingPromises.clear();
    this.materialPromises.clear();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ –≤ –∫–µ—à–µ
  hasModel(modelPath: string, mtlPath?: string): boolean {
    const cacheKey = this.getModelKey(modelPath, mtlPath);
    return this.modelCache.has(cacheKey);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const modelCache = new ModelCacheManager();
export default modelCache;